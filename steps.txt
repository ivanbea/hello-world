1 create new repository on github
2 clone it from my pc git clone https:gdfgdgshshs
3 work on my pc within the directory of the repo
4 git add file
5 git commit file
6 git push origin master

in any case:
git status
git log

in a single steps for files already tracked (added)
git commit -a -m "text for the commit"

remove files
git rm somefile.txt
git commit -m "we do'nt want this files"

move files
git mv file.rb subdirectory/
git commit -m "let's move things around"

ignore files
vi .gitignore *.extensio

ammend
git commit --amend

unstage a file (previously added but we don't want in the commit)
git reset HEAD file_to_remove

Return the modified file to the previous published state
git checkout -- new_script.rb

Rollbacks
git revert HEAD

git log -p -2 (-p diff information, -2 only las 2 commits)

target specific commit with the commit ID (seen in git log) it is a hash with SHA1 uses for consistency, not security. With a hash the collisions are really really rare.

git revert HASHID (normally only the first 4 characters

____________ADVANCED LESSONS________________

branch 
default branch - master
other branches - to experiment without messing master
and when all is correct we can merge the changes with master
HEAD point to the commit where your current working directory is based on

git branch (lists all)
git branch -d name-branch-to-delete (or -D)
git branch new_branch

enought for me
_______________________________________________

remote repository

local git server for privacy

git remote add origin https://github.------ (instead of a clone we create a lnk)

HTTP readonly
HTTPS SSH authentificate

git remote
git remote rename
get remote remove origin
git remote -v (list url)

git remote add shortname url

git fetch shortname (pull data from a remote)
git fetch shortname branch (pull only a specific branch)
git branch -r (shows remote branches, they are read only)

MERGE
git fetch origin master (get all the code from the remote repository)
git status (can tell us if our branch is behind the origin/master)
git log --decorate origin/master
if we whant all this changes in our master branch
git merge origin/master

PULL
fetch and merge at the same time, get the copy and merge it in the local branch

git pull origin

git pull origin master

PUSH
send data upstream to a remote repository

git push origin master (enter login)
git push --all origin

push can fail if the remote have work that it is not stored locally, newest one, first pull
git pull origin master
if it is a conflict it tells us and we can modify the file, then git commit -a -m "Merging the file"
git push origin master


